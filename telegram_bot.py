import os
import asyncio
from telegram import Bot
from telegram.error import TelegramError
import pandas as pd
from datetime import datetime

# You'll need to get a bot token from BotFather on Telegram
# Visit https://t.me/BotFather to create a new bot and get the token
BOT_TOKEN = "8010216603:AAGkhr-jOZTpG7vdpf0LG1VrI-fuDUFil0Q"  # Replace with your actual token
CHAT_ID = "-4645320943"      # Replace with your chat ID

async def send_message(message):
    """
    Send a message via Telegram bot
    
    Parameters:
    message (str): Message to send
    """
    try:
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
        print(f"Message sent: {message}")
        return True
    except TelegramError as e:
        print(f"Error sending message: {e}")
        return False

async def send_signal(signal_data):
    """
    Send a trading signal via Telegram
    
    Parameters:
    signal_data (dict): Signal data including price, signal type, strength, and reason
    """
    # Format the message
    signal_type = "üü¢ BUY" if signal_data['signal'] == 1 else "üî¥ SELL"
    strength_stars = "‚≠ê" * signal_data['strength']
    
    message = f"*XAU/USD SIGNAL: {signal_type}*\n\n"
    message += f"*Price:* ${signal_data['price']:.2f}\n"
    message += f"*Time:* {signal_data['time']}\n"
    message += f"*Strength:* {strength_stars} ({signal_data['strength']}/10)\n"
    message += f"*Reason:* {signal_data['reason']}\n\n"
    
    if 'stop_loss' in signal_data and 'take_profit' in signal_data:
        message += f"*Stop Loss:* ${signal_data['stop_loss']:.2f}\n"
        message += f"*Take Profit:* ${signal_data['take_profit']:.2f}\n"
    
    message += "\n_Generated by XAU/USD AI Trading Bot_"
    
    # Send the message
    return await send_message(message)

def calculate_stop_loss_take_profit(price, signal, atr_value):
    """
    Calculate stop loss and take profit levels based on ATR
    
    Parameters:
    price (float): Current price
    signal (int): Signal type (1 for buy, -1 for sell)
    atr_value (float): ATR value
    
    Returns:
    tuple: (stop_loss, take_profit)
    """
    if signal == 1:  # Buy signal
        stop_loss = price - 2 * atr_value
        take_profit = price + 3 * atr_value
    else:  # Sell signal
        stop_loss = price + 2 * atr_value
        take_profit = price - 3 * atr_value
    
    return stop_loss, take_profit

async def check_and_send_signals(df):
    """
    Check for new signals and send them via Telegram
    
    Parameters:
    df (pandas.DataFrame): DataFrame with signal data
    
    Returns:
    bool: True if a signal was sent, False otherwise
    """
    # Get the latest row
    latest = df.iloc[-1]
    
    # Check if there's a signal
    if latest['signal'] != 0:
        # Calculate stop loss and take profit
        stop_loss, take_profit = calculate_stop_loss_take_profit(
            latest['Close'], 
            latest['signal'], 
            latest['ATR']
        )
        
        # Prepare signal data
        signal_data = {
            'signal': latest['signal'],
            'price': latest['Close'],
            'time': latest.name.strftime('%Y-%m-%d %H:%M:%S'),
            'strength': int(latest['signal_strength']),
            'reason': latest['signal_reason'],
            'stop_loss': stop_loss,
            'take_profit': take_profit
        }
        
        # Send the signal
        return await send_signal(signal_data)

# Add the TelegramNotifier class that was missing
class TelegramNotifier:
    """
    A class to handle Telegram notifications for trading signals
    """
    def __init__(self, token, chat_id):
        """
        Initialize the TelegramNotifier
        
        Parameters:
        token (str): Telegram bot token
        chat_id (str): Telegram chat ID to send messages to
        """
        self.token = token
        self.chat_id = chat_id
    
    def send_signal(self, signal_type, price, indicators):
        """
        Send a trading signal notification
        
        Parameters:
        signal_type (str): Type of signal (BUY, SELL, NEUTRAL)
        price (float): Current price
        indicators (dict): Dictionary of technical indicators
        
        Returns:
        bool: True if message was sent successfully, False otherwise
        """
        try:
            # Format the message
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥" if signal_type == "SELL" else "‚ö™"
            
            message = f"*XAU/USD SIGNAL: {signal_emoji} {signal_type}*\n\n"
            message += f"*Price:* ${price:.2f}\n"
            message += f"*Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            message += "*Technical Indicators:*\n"
            for indicator, value in indicators.items():
                message += f"- {indicator}: {value:.2f}\n"
            
            message += "\n_Generated by Gold Trading Dashboard_"
            
            # Create a new event loop for async operation
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # Send the message
            bot = Bot(token=self.token)
            loop.run_until_complete(bot.send_message(
                chat_id=self.chat_id, 
                text=message, 
                parse_mode='Markdown'
            ))
            
            print(f"Signal notification sent: {signal_type} at ${price:.2f}")
            return True
            
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            return False